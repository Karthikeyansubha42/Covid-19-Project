{
	"name": "dflow_hospital_admission_rate",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admission_rate",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionRateSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_code_blob",
						"type": "DatasetReference"
					},
					"name": "CountryCode"
				},
				{
					"dataset": {
						"referenceName": "ds_date_blob",
						"type": "DatasetReference"
					},
					"name": "DateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sliver_adls",
						"type": "DatasetReference"
					},
					"name": "SinkWeeklyData"
				},
				{
					"dataset": {
						"referenceName": "ds_sliver_adls",
						"type": "DatasetReference"
					},
					"name": "SinkDailyData"
				}
			],
			"transformations": [
				{
					"name": "LeftJoinHospitalAndCountryCode"
				},
				{
					"name": "SelectNeededColumn"
				},
				{
					"name": "SplitWeeklyAndDailyBasis"
				},
				{
					"name": "PivotIndicatorWeekly"
				},
				{
					"name": "PivotIndicatorDaily"
				},
				{
					"name": "CastWeeklyIndicatorValue",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "CastDailyIndicatorValue",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "SelectRequiredFileds1"
				},
				{
					"name": "SelectRequiredFileds2"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "AggregateDatefield"
				},
				{
					"name": "DervingYearWeekColumn"
				},
				{
					"name": "SelectRequiredFields"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as short,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionRateSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> CountryCode",
				"source(output(",
				"          date_key as date 'yyyyMMdd',",
				"          date as date 'dd-MM-yyyy',",
				"          year as short,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as short,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DateSource",
				"HospitalAdmissionRateSource, CountryCode join(HospitalAdmissionRateSource@country == CountryCode@country,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftJoinHospitalAndCountryCode",
				"LeftJoinHospitalAndCountryCode select(mapColumn(",
				"          country = HospitalAdmissionRateSource@country,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectNeededColumn",
				"SelectNeededColumn split(indicator=='Weekly new hospital admissions per 100k' || indicator=='Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> SplitWeeklyAndDailyBasis@(Weekly, Daily)",
				"SelectRequiredFields pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          source,",
				"          population,",
				"          reported_year_week,",
				"          start_date,",
				"          end_date),",
				"     pivotBy(indicator),",
				"     {count of} = sum(value),",
				"     columnNaming: '$N $V',",
				"     lateral: true) ~> PivotIndicatorWeekly",
				"SplitWeeklyAndDailyBasis@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          source,",
				"          population,",
				"          reported_date),",
				"     pivotBy(indicator),",
				"     {count of} = sum(value),",
				"     columnNaming: '$N $V',",
				"     lateral: true) ~> PivotIndicatorDaily",
				"PivotIndicatorWeekly derive(weekly_count_of_ICU_admission = toInteger(byName('count of Weekly new ICU admissions per 100k')),",
				"          weekly_count_of_hospital_admission = toInteger(byName('count of Weekly new hospital admissions per 100k'))) ~> CastWeeklyIndicatorValue",
				"PivotIndicatorDaily derive(daily_count_of_ICU_admission = toInteger(byName('count of Daily ICU occupancy')),",
				"          daily_count_of_hospital_admission = toInteger(byName('count of Daily hospital occupancy'))) ~> CastDailyIndicatorValue",
				"CastWeeklyIndicatorValue select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          source,",
				"          population,",
				"          reported_year_week,",
				"          start_date,",
				"          end_date,",
				"          weekly_count_of_ICU_admission,",
				"          weekly_count_of_hospital_admission",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRequiredFileds1",
				"CastDailyIndicatorValue select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          source,",
				"          population,",
				"          reported_date,",
				"          daily_count_of_ICU_admission,",
				"          daily_count_of_hospital_admission",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRequiredFileds2",
				"SplitWeeklyAndDailyBasis@Weekly, AggregateDatefield lookup(reported_year_week == year_week,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"DervingYearWeekColumn aggregate(groupBy(year_week),",
				"     start_date = min(date),",
				"          end_date = max(date)) ~> AggregateDatefield",
				"DateSource derive(year_week = left(toString(year_week),4) + '-W' + right(toString(year_week),2)) ~> DervingYearWeekColumn",
				"lookup1 select(mapColumn(",
				"          country,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          reported_year_week,",
				"          value,",
				"          start_date,",
				"          end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRequiredFields",
				"SelectRequiredFileds1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Weekly_hospital_admission_rate.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkWeeklyData",
				"SelectRequiredFileds2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Daily_hospital_admission_rates.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkDailyData"
			]
		}
	}
}